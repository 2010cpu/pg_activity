#!/usr/bin/env python
"""
pg_top utility
version: 0.1 DEV
author: Julien Tachoires <julmon@gmail.com>
license: BSD-3 license
"""

import os
import sys
if os.name != 'posix':
	sys.exit('FATAL: Platform not supported.')
import time
import curses
import atexit
from datetime import datetime, timedelta
import psutil
import psycopg2
import psycopg2.extras
import re
from optparse import OptionParser, OptionGroup
import optparse
import socket

"""
Called at exit time.
Rollback to default values.
"""
def at_exit_curses():
	win.keypad(0)
	win.move(0,0)
	win.erase()
	curses.nocbreak()
	curses.echo()
	curses.curs_set(1)
	curses.endwin()

"""
Curses initialization
"""
curses.setupterm()
win = curses.initscr()
win.keypad(1)
curses.noecho()
curses.cbreak()
# deactivate cursor
curses.curs_set(0)
# use colors
curses.start_color()
curses.use_default_colors()
# register at_exit function
atexit.register(at_exit_curses)
lineno = 0
curses.endwin()

# define some color pairs
C_BLACK_GREEN = 1
C_CYAN = 2
C_RED = 3
C_GREEN = 4
C_YELLOW = 5
C_MAGENTA = 6
C_WHITE = 7
curses.init_pair(C_BLACK_GREEN, curses.COLOR_BLACK, curses.COLOR_GREEN)
curses.init_pair(C_CYAN, curses.COLOR_CYAN, curses.COLOR_BLACK)
curses.init_pair(C_RED, curses.COLOR_RED, curses.COLOR_BLACK)
curses.init_pair(C_GREEN, curses.COLOR_GREEN, curses.COLOR_BLACK)
curses.init_pair(C_YELLOW, curses.COLOR_YELLOW, curses.COLOR_BLACK)
curses.init_pair(C_MAGENTA, curses.COLOR_MAGENTA, curses.COLOR_BLACK)
curses.init_pair(C_WHITE, curses.COLOR_WHITE, curses.COLOR_BLACK)

# Columns
PGTOP_FLAG_DATABASE = 1
PGTOP_FLAG_CLIENT = 2
PGTOP_FLAG_CPU = 4
PGTOP_FLAG_MEM = 8
PGTOP_FLAG_READ = 16
PGTOP_FLAG_WRITE = 32
PGTOP_FLAG_TIME = 64
PGTOP_FLAG_WAIT = 128
PGTOP_FLAG_NONE = None
PGTOP_FLAGS_COL = PGTOP_FLAG_DATABASE | PGTOP_FLAG_CPU | PGTOP_FLAG_MEM | PGTOP_FLAG_READ | PGTOP_FLAG_WRITE | PGTOP_FLAG_TIME | PGTOP_FLAG_WAIT
pgtop_cols = {
	'pid'		: {'n': 1, 'name': 'PID', 'template_h': '%-6s ', 'flag': PGTOP_FLAG_NONE, 'mandatory': True},
	'database'	: {'n': 2, 'name': 'DATABASE', 'template_h': '%-8s ', 'flag': PGTOP_FLAG_DATABASE, 'mandatory': False},
	'client'	: {'n': 3, 'name': 'CLIENT', 'template_h': '%16s ', 'flag': PGTOP_FLAG_CLIENT, 'mandatory': False},
	'cpu'		: {'n': 4, 'name': 'CPU%', 'template_h': '%5s ', 'flag': PGTOP_FLAG_CPU, 'mandatory': False},
	'mem'		: {'n': 5, 'name': 'MEM%', 'template_h': '%4s ', 'flag': PGTOP_FLAG_MEM, 'mandatory': False},
	'read'		: {'n': 6, 'name': 'READ/s', 'template_h': '%6s ', 'flag': PGTOP_FLAG_READ, 'mandatory': False},
	'write'		: {'n': 7, 'name': 'WRITE/s', 'template_h': '%7s ', 'flag': PGTOP_FLAG_WRITE, 'mandatory': False},
	'time'		: {'n': 8, 'name': 'TIME+', 'template_h': '%9s ', 'flag': PGTOP_FLAG_TIME, 'mandatory': False},
	'wait'		: {'n': 9, 'name': 'W', 'template_h': '%2s ', 'flag': PGTOP_FLAG_WAIT, 'mandatory': False},
	'query'		: {'n': 10, 'name': 'Query', 'template_h': ' %2s', 'flag': PGTOP_FLAG_NONE, 'mandatory': True},
}

"""
Replace colors by white.
"""
def set_nocolor():
	curses.A_BOLD = 0
	curses.A_UNDERLINE = 0
	curses.init_pair(C_BLACK_GREEN, curses.COLOR_BLACK, curses.COLOR_WHITE)
	curses.init_pair(C_CYAN, curses.COLOR_WHITE, curses.COLOR_BLACK)
	curses.init_pair(C_RED, curses.COLOR_WHITE, curses.COLOR_BLACK)
	curses.init_pair(C_GREEN, curses.COLOR_WHITE, curses.COLOR_BLACK)
	curses.init_pair(C_YELLOW, curses.COLOR_WHITE, curses.COLOR_BLACK)
	curses.init_pair(C_MAGENTA, curses.COLOR_WHITE, curses.COLOR_BLACK)
	curses.init_pair(C_WHITE, curses.COLOR_WHITE, curses.COLOR_BLACK)

"""
Strip and replace some special characters.
"""
def clean_str(string):
	msg = str(string)
	msg = msg.replace("\n", " ")
	msg = re.sub(r'\s+', r' ', msg)
	msg = msg.replace("FATAL:", "")
	msg = re.sub(r'^\s', r'', msg)
	msg = re.sub(r'\s$', r'', msg)
	return msg

"""
Connect to a PostgreSQL server and returns
cursor & connector.
"""
def pg_connect(host = 'localhost', port = 5432, user = 'postgres', password = None):
	conn = psycopg2.connect(
			database = 'postgres',
			host = host,
			port = port,
			user = user,
			password = password
		)
	cur = conn.cursor(cursor_factory=psycopg2.extras.DictCursor)
	conn.set_isolation_level(0)
	return (cur, conn)

"""
Get PostgreSQL server version
"""
def pg_get_version(cur, conn):
	cur.execute("BEGIN")
	query = """
	SELECT version() AS pg_version
	"""
	res = cur.execute(query)
	ret = cur.fetchone()
	cur.execute("COMMIT")
	return ret['pg_version']

"""
Get PostgreSQL short & numeric version from
a string (SELECT version())
"""
def pg_get_num_version(text_version):
	res = re.match(r'^PostgreSQL ([0-9]+)\.([0-9]+)\.([0-9]+)', text_version)
	if res is not None:
		r = res.group(1)
		if int(res.group(2)) < 10:
			r += '0'
		r += res.group(2)
		if int(res.group(3)) < 10:
			r += '0'
		r += res.group(3)
		return (res.group(0), int(r))
	return None

"""
Get activity from pg_stat_activity view
"""
def pg_get_activities(cur, conn, pg_num_version):
	if pg_num_version >= 90200:
		# PostgreSQL 9.2.0 and more
		query = """
		SELECT
			pg_stat_activity.pid AS pid,
			pg_stat_activity.datname AS database,
			pg_stat_activity.client_addr AS client,
			EXTRACT(epoch FROM (NOW() - pg_stat_activity.query_start)) AS duration,
			pg_stat_activity.waiting AS wait,
			pg_stat_activity.usename AS user,
			pg_stat_activity.query AS query
		FROM
			pg_stat_activity
		WHERE
			state <> 'idle'
		ORDER BY
			EXTRACT(epoch FROM (NOW() - pg_stat_activity.query_start)) DESC
		"""
	elif pg_num_version < 90200:
		# PostgreSQL prior to 9.2.0
		query = """
		SELECT
			pg_stat_activity.procpid AS pid,
			pg_stat_activity.datname AS database,
			pg_stat_activity.client_addr AS client,
			EXTRACT(epoch FROM (NOW() - pg_stat_activity.query_start)) AS duration,
			pg_stat_activity.waiting AS wait,
			pg_stat_activity.usename AS user,
			pg_stat_activity.current_query AS query
		FROM
			pg_stat_activity
		WHERE
			current_query <> '<IDLE>'
		ORDER BY
			EXTRACT(epoch FROM (NOW() - pg_stat_activity.query_start)) DESC
		"""
	cur.execute("BEGIN")
	res = cur.execute(query)
	ret = cur.fetchall()
	cur.execute("COMMIT")
	return ret

"""
Get system informations (CPU, memory, IO read & write)
for each process PID -- retreived previously from pg_stat_activity -- with
psutil module.
"""
def sys_get_proc(queries):
	process = {}
	for sq in queries:
		try:
			p = psutil.Process(sq['pid'])
			p._meminfo = p.get_memory_info()
			p._io_counters = p.get_io_counters()
			p._io_time = time.time()
			p._mempercent = p.get_memory_percent()
			p._cpu_percent = p.get_cpu_percent(interval=0)
			p._cpu_times = p.get_cpu_times()
			p._pg_user = sq['user']
			p._pg_database = sq['database']
			p._pg_client = sq['client']
			p._pg_duration = sq['duration']
			p._pg_wait = sq['wait']
			p._pg_query = clean_str(sq['query'])
			p._io_read_delta = 0
			p._io_write_delta = 0
			process[sq['pid']] = p
		except psutil.error.NoSuchProcess as e:
			pass
	return process

"""
PAUSE mode
"""
def pause():
	(y,x) = win.getmaxyx()
	msg = "PAUSE"
	line = ""
	line += " " * (int(x/2) - len(msg))
	line += msg
	line += " " * (x - len(line) - 0)
	win.addstr(4, 0, line, curses.color_pair(C_RED)|curses.A_REVERSE|curses.A_BOLD)
	while 1:
		k = win.getch()
		if k == ord('q'):
			curses.endwin()
			exit()
		if k == ord(' '):
			curses.flushinp()
			win.addstr((y-1), 0, " ", curses.color_pair(0))
			return 0
		curses.flushinp()

"""
Poll activities.
"""
def poll(interval, cursor, connector, process = None, pg_num_version = None):
	
	win.timeout(1000 * interval)
	k = win.getch()
	if k == ord('q'):
		curses.endwin()
		exit()
	if k == ord(' '):
		pause()
	curses.flushinp()
	
	queries =  pg_get_activities(cursor, connector, pg_num_version)
	new_procs = sys_get_proc(queries)
	procs_status = {}
	procs = []
	for pid,p in new_procs.items():
		try:
			if process.has_key(pid):
				n_pg_duration = p._pg_duration
				n_pg_query = p._pg_query
				n_pg_client = p._pg_client
				n_io_counters = p.get_io_counters()
				n_io_time = time.time()
				p = process[pid]
				p._pg_duration = n_pg_duration
				p._pg_query = n_pg_query
				p._pg_client = n_pg_client
				p._io_read_delta = (n_io_counters.read_bytes - p._io_counters.read_bytes)/(n_io_time - p._io_time)
				p._io_write_delta = (n_io_counters.write_bytes - p._io_counters.write_bytes)/(n_io_time - p._io_time)
				p._io_counters = n_io_counters
				p._io_time = n_io_time
			else:
				p._io_counters = p.get_io_counters()
			p._meminfo = p.get_memory_info()
			p._mempercent = p.get_memory_percent()
			p._cpu_percent = p.get_cpu_percent(interval=0)
			p._cpu_times = p.get_cpu_times()
			p._name = p.name
			new_procs[pid] = p
			procs.append(p)
			try:
				procs_status[str(p.status)] += 1
			except KeyError:
				procs_status[str(p.status)] = 1
		except psutil.NoSuchProcess:
			pass

	# return processes sorted by query duration
	disp_procs = sorted(procs, key=lambda p: p._pg_duration, reverse=True)
	return (disp_procs, procs_status, new_procs)

"""
Simple curses wrapper for line printing
"""
def print_line(line, highlight=False):
	global lineno
	try:
		if highlight:
			line += " " * (win.getmaxyx()[1] - len(line))
			win.addstr(lineno, 0, line, curses.color_pair(C_BLACK_GREEN))
		else:
			win.addstr(line, 0)
	except curses.error:
		lineno = 0
		win.refresh()
		raise
	else:
		lineno += 1
"""
Simple curses wrapper for word printing
"""
def print_word(word, color = 0):
	win.addstr(word, color)

"""
"""
def bytes2human(n):
	symbols = ('K', 'M', 'G', 'T', 'P', 'E', 'Z', 'Y')
	prefix = {}
	for i, s in enumerate(symbols):
		prefix[s] = 1 << (i+1)*10
	for s in reversed(symbols):
		if n >= prefix[s]:
			value = int(float(n) / prefix[s])
			return '%s%s' % (value, s)
	return "%sB" % n

"""
"""
def get_cols_header(flag):
	ret = ''
	r = [0] * 11
	for key, val in pgtop_cols.items():
		if val['mandatory'] or (not val['mandatory'] and val['flag'] & flag):
			r[int(val['n'])] = val
	for val in r:
		if val is not 0:
			ret += val['template_h'] % val['name']
	return ret

"""
"""
def print_header(procs_status, pg_version, hostname, user, host, port):
	version = " %s" % (pg_version)
	print_word(version)
	print_word(" - ")
	print_word(hostname, curses.A_BOLD)
	print_word(" - ")
	print_word(user, curses.color_pair(C_CYAN))
	print_word('@')
	print_word(host, curses.color_pair(C_CYAN))
	print_word(':')
	print_word(port, curses.color_pair(C_CYAN))
	print_word("\n")
	print_line("")
	print_line("")

	# physmem usage (on linux we include buffers and cached values
	# to match htop results)
	phymem = psutil.phymem_usage()
	buffers = getattr(psutil, 'phymem_buffers', lambda: 0)()
	cached = getattr(psutil, 'cached_phymem', lambda: 0)()
	used = phymem.total - (phymem.free + buffers + cached)
	line = "  mem.: %5s%% %9s/%s\n" % (
		phymem.percent,
		str(int(used / 1024 / 1024)) + "M",
		str(int(phymem.total / 1024 / 1024)) + "M"
	)
	print_line(line)

	# swap usage
	vmem = psutil.virtmem_usage()
	line = "  swap: %5s%% %9s/%s\n" % (
		vmem.percent,
		str(int(vmem.used / 1024 / 1024)) + "M",
		str(int(vmem.total / 1024 / 1024)) + "M"
	)
	print_line(line)

	# load average, uptime
	av1, av2, av3 = os.getloadavg()
	line = "  load:   %.2f %.2f %.2f\n" % (av1, av2, av3)
	print_line(line)

"""
"""
def refresh_window(procs, procs_status, extras, flag, cols_header):
	(pg_version, hostname, user, host, port) = extras
	"""Print results on screen by using curses."""
	win.erase()
	print_header(procs_status, pg_version, hostname, user, host, port)
	print_line(cols_header, highlight=True)
	win.refresh()
	for p in procs:
		try:
			print_word("%-6s " % (p.pid,), curses.color_pair(C_CYAN))
			if flag & PGTOP_FLAG_DATABASE:
				print_word("%-8s " % (p._pg_database[:8],), curses.A_UNDERLINE | curses.color_pair(0))
 			if flag & PGTOP_FLAG_CLIENT:
				print_word("%16s " % (str(p._pg_client)[:16],), curses.color_pair(C_CYAN))
			if flag & PGTOP_FLAG_CPU:
				print_word("%5s " % (p._cpu_percent,))
			if flag & PGTOP_FLAG_MEM:
				print_word("%4s " % (round(p._mempercent, 1),))
			if flag & PGTOP_FLAG_READ:
				print_word("%6s " % (bytes2human(p._io_read_delta),))
			if flag & PGTOP_FLAG_WRITE:
				print_word("%7s " % (bytes2human(p._io_write_delta),))
			if flag & PGTOP_FLAG_TIME:
				if p._pg_duration < 0:
					p._pg_duration = 0
				if p._pg_duration >= 1:
					ctime = timedelta(seconds=float(p._pg_duration))
					mic = '%.6d' % (ctime.microseconds)
					ctime = "%s:%s.%s" % (str((ctime.seconds // 60)).zfill(2), str((ctime.seconds % 60)).zfill(2), str(mic)[:2])
				if p._pg_duration < 1:
					print_word(" %.6f " % (p._pg_duration,), curses.color_pair(C_GREEN))
				elif p._pg_duration >= 1 and p._pg_duration < 3:
					print_word("%9s " % (ctime,), curses.color_pair(C_YELLOW))
				else:
					print_word("%9s " % (ctime,), curses.color_pair(C_RED))
			if flag & PGTOP_FLAG_WAIT:
				if p._pg_wait:
					print_word("%2s " % ("Y",), curses.color_pair(C_RED) | curses.A_BOLD)
				else:
					print_word("%2s " % ("N",), curses.color_pair(C_GREEN) | curses.A_BOLD)
							
			print_word(" %2s\n" % (p._pg_query,))
		except curses.error as e:
			break
		win.refresh()

"""
main
"""
def main():
	global lineno
	try:
		
		parser = OptionParser(add_help_option=False)
		parser.add_option("-U", "--username", dest="username", default="postgres", help="Database user name (default: \"postgres\").", metavar="USERNAME")
		parser.add_option("-p", "--port", dest="port", default="5432", help="Database server port (default: \"5432\").", metavar="PORT")
		parser.add_option("-h", "--host", dest="host", help="Database server host or socket directory (default: \"local socket\").", metavar="HOSTNAME")
		parser.add_option("-C", "--no-color", dest="nocolor", action="store_true", help="Disable color usage.")
		group = OptionGroup(parser, "Display Options, you can exclude some columns by using them ")
		group.add_option("--no-database", dest="nodb", action="store_true", help="Disable DATABASE.")
		group.add_option("--no-client", dest="noclient", action="store_true", help="Disable CLIENT.")
		group.add_option("--no-cpu", dest="nocpu", action="store_true", help="Disable CPU%.")
		group.add_option("--no-mem", dest="nomem", action="store_true", help="Disable MEM%.")
		group.add_option("--no-read", dest="noread", action="store_true", help="Disable READ/s.")
		group.add_option("--no-write", dest="nowrite", action="store_true", help="Disable WRITE/s.")
		group.add_option("--no-time", dest="notime", action="store_true", help="Disable TIME+.")
		group.add_option("--no-wait", dest="nowait", action="store_true", help="Disable W.")
		parser.add_option_group(group)
		parser.add_option("--help", dest="help", action="store_true", help="Show this help message and exit.")
    
		(options, args) = parser.parse_args()
		if options.help is True:
			print(parser.format_help().strip())
			exit()
		password = os.environ.get('PGPASSWORD')
		
		try:
			(cur, conn) = pg_connect(host = options.host, port = options.port, user = options.username, password = password)
		except psycopg2.Error, e:
			print "FATAL: %s" % (clean_str(str(e),))
			return 0
		pg_version = pg_get_version(cur, conn)
		(pg_short_version, pg_num_version) = pg_get_num_version(pg_version)
		# top part
		interval = 0
		queries =  pg_get_activities(cur, conn, pg_num_version)
		procs = sys_get_proc(queries)
		hostname = socket.gethostname()
		# color ?
		if options.nocolor == True:
			set_nocolor()
		
		# default flag
		flag = PGTOP_FLAG_DATABASE | PGTOP_FLAG_CLIENT | PGTOP_FLAG_CPU | PGTOP_FLAG_MEM | PGTOP_FLAG_READ | PGTOP_FLAG_WRITE | PGTOP_FLAG_TIME | PGTOP_FLAG_WAIT
		if options.nodb is True:
			flag -= PGTOP_FLAG_DATABASE
		if options.nocpu is True:
			flag -= PGTOP_FLAG_CPU
		if options.noclient is True:
			flag -= PGTOP_FLAG_CLIENT
		if options.nomem is True:
			flag -= PGTOP_FLAG_MEM
		if options.noread is True:
			flag -= PGTOP_FLAG_READ
		if options.nowrite is True:
			flag -= PGTOP_FLAG_WRITE
		if options.notime is True:
			flag -= PGTOP_FLAG_TIME
		if options.nowait is True:
			flag -= PGTOP_FLAG_WAIT
	
		cols_header = get_cols_header(flag)
	
		while 1:
			(disp_procs, procs_status, new_procs) = poll(interval, cur, conn, procs, pg_num_version)
			procs = new_procs
			lineno = 0
			refresh_window(disp_procs, procs_status, (pg_short_version, hostname, options.username, options.host, options.port), flag, cols_header)
			interval = 1
	except psutil.error.AccessDenied as e:
		print "FATAL: Can't acces IO informations for process %s" % (str(e),)
	except (KeyboardInterrupt, SystemExit):
		pass
	except Exception as e:
		print "FATAL: %s" % (str(e),)	

if __name__ == '__main__':
	main()
